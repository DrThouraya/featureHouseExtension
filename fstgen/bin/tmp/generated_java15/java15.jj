
/*
 * Copyright Â© 2002 Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * California 95054, U.S.A. All rights reserved.  Sun Microsystems, Inc. has
 * intellectual property rights relating to technology embodied in the product
 * that is described in this document. In particular, and without limitation,
 * these intellectual property rights may include one or more of the U.S.
 * patents listed at http://www.sun.com/patents and one or more additional
 * patents or pending patent applications in the U.S. and in other countries.
 * U.S. Government Rights - Commercial software. Government users are subject
 * to the Sun Microsystems, Inc. standard license agreement and applicable
 * provisions of the FAR and its supplements.  Use is subject to license terms.
 * Sun,  Sun Microsystems,  the Sun logo and  Java are trademarks or registered
 * trademarks of Sun Microsystems, Inc. in the U.S. and other countries.  This
 * product is covered and controlled by U.S. Export Control laws and may be
 * subject to the export or import laws in other countries.  Nuclear, missile,
 * chemical biological weapons or nuclear maritime end uses or end users,
 * whether direct or indirect, are strictly prohibited.  Export or reexport
 * to countries subject to U.S. embargo or to entities identified on U.S.
 * export exclusion lists, including, but not limited to, the denied persons
 * and specially designated nationals lists is strictly prohibited.
 */

options {
	JAVA_UNICODE_ESCAPE = true;
	ERROR_REPORTING = true;
	STATIC = false;
}


PARSER_BEGIN(Java15Parser)
package tmp.generated_java15;

import java.io.*;
import java.util.*;
import cide.gast.*;
import cide.gparser.*;
import de.ovgu.cide.fstgen.ast.*;


/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 */
public class Java15Parser extends AbstractFSTParser {
	public Java15Parser(){}
}

PARSER_END(Java15Parser)

/* WHITE SPACE */
SPECIAL_TOKEN : {
	" "
	|  "\t"
	|  "\n"
	|  "\r"
	|  "\f"
}

/* COMMENTS */
MORE : {
	"//" : IN_SINGLE_LINE_COMMENT
	|  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
	|  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : {
	<SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN : {
	<FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN : {
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE : {
	< ~[] >
}

/* RESERVED WORDS AND LITERALS */
TOKEN : {
	< ABSTRACT: "abstract" >
	|  < ASSERT: "assert" >
	|  < BOOLEAN: "boolean" >
	|  < BREAK: "break" >
	|  < BYTE: "byte" >
	|  < CASE: "case" >
	|  < CATCH: "catch" >
	|  < CHAR: "char" >
	|  < CLASS: "class" >
	|  < CONST: "const" >
	|  < CONTINUE: "continue" >
	|  < _DEFAULT: "default" >
	|  < DO: "do" >
	|  < DOUBLE: "double" >
	|  < ELSE: "else" >
	|  < ENUM: "enum" >
	|  < EXTENDS: "extends" >
	|  < FALSE: "false" >
	|  < FINAL: "final" >
	|  < FINALLY: "finally" >
	|  < FLOAT: "float" >
	|  < FOR: "for" >
	|  < GOTO: "goto" >
	|  < IF: "if" >
	|  < IMPLEMENTS: "implements" >
	|  < IMPORT: "import" >
	|  < INSTANCEOF: "instanceof" >
	|  < INT: "int" >
	|  < INTERFACE: "interface" >
	|  < LONG: "long" >
	|  < NATIVE: "native" >
	|  < NEW: "new" >
	|  < NULL: "null" >
	|  < PACKAGE: "package">
	|  < PRIVATE: "private" >
	|  < PROTECTED: "protected" >
	|  < PUBLIC: "public" >
	|  < RETURN: "return" >
	|  < SHORT: "short" >
	|  < STATIC: "static" >
	|  < STRICTFP: "strictfp" >
	|  < SUPER: "super" >
	|  < SWITCH: "switch" >
	|  < SYNCHRONIZED: "synchronized" >
	|  < THIS: "this" >
	|  < THROW: "throw" >
	|  < THROWS: "throws" >
	|  < TRANSIENT: "transient" >
	|  < TRUE: "true" >
	|  < TRY: "try" >
	|  < VOID: "void" >
	|  < VOLATILE: "volatile" >
	|  < WHILE: "while" >
}

/* LITERALS */
TOKEN : {
	< INTEGER_LITERAL: <DECIMAL_LITERAL> (["l","L"])?
		| <HEX_LITERAL> (["l","L"])?
		| <OCTAL_LITERAL> (["l","L"])? >
	|  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
	|  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
	|  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
	|  < FLOATING_POINT_LITERAL:
		(["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
		|  "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
		|  (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
		|  (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"] >
	|  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
	|  < CHARACTER_LITERAL:
		"'" ( (~["'","\\","\n","\r"])
		| ("\\" ( ["n","t","b","r","f","u","\\","'","\""]
			| ["0"-"7"] ( ["0"-"7"] )?
			| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) ) "'" >
	| < STRING_LITERAL:
      "\""
		( (~["\"","\\","\n","\r"])
		|  ("\\"
			( ["n","t","b","r","f","u","\\","'","\""]
			| ["0"-"7"] ( ["0"-"7"] )?
			| ["0"-"3"] ["0"-"7"] ["0"-"7"] ) ) )* "\"" >
}

/* IDENTIFIERS */
TOKEN : {
	< IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
	|  < #LETTER:
		[
		"\u0024",
		"\u0041"-"\u005a",
		"\u005f",
		"\u0061"-"\u007a",
		"\u00c0"-"\u00d6",
		"\u00d8"-"\u00f6",
		"\u00f8"-"\u00ff",
		"\u0100"-"\u1fff",
		"\u3040"-"\u318f",
		"\u3300"-"\u337f",
		"\u3400"-"\u3d2d",
		"\u4e00"-"\u9fff",
		"\uf900"-"\ufaff"
		] >
	|  < #DIGIT:
		[
		"\u0030"-"\u0039",
		"\u0660"-"\u0669",
		"\u06f0"-"\u06f9",
		"\u0966"-"\u096f",
		"\u09e6"-"\u09ef",
		"\u0a66"-"\u0a6f",
		"\u0ae6"-"\u0aef",
		"\u0b66"-"\u0b6f",
		"\u0be7"-"\u0bef",
		"\u0c66"-"\u0c6f",
		"\u0ce6"-"\u0cef",
		"\u0d66"-"\u0d6f",
		"\u0e50"-"\u0e59",
		"\u0ed0"-"\u0ed9",
		"\u1040"-"\u1049"
		] >
}

/* SEPARATORS */
TOKEN : {
	< LPAREN: "(" >
	|  < RPAREN: ")" >
	|  < LBRACE: "{" >
	|  < RBRACE: "}" >
	|  < LBRACKET: "[" >
	|  < RBRACKET: "]" >
	|  < SEMICOLON: ";" >
	|  < COMMA: "," >
	|  < DOT: "." >
	|  < AT: "@" >
}

/* OPERATORS */
TOKEN : {
	< ASSIGN: "=" >
	|  < LT: "<" >
	|  < BANG: "!" >
	|  < TILDE: "~" >
	|  < HOOK: "?" >
	|  < COLON: ":" >
	|  < EQ: "==" >
	|  < LE: "<=" >
	|  < GE: ">=" >
	|  < NE: "!=" >
	|  < SC_OR: "||" >
	|  < SC_AND: "&&" >
	|  < INCR: "++" >
	|  < DECR: "--" >
	|  < PLUS: "+" >
	|  < MINUS: "-" >
	|  < STAR: "*" >
	|  < SLASH: "/" >
	|  < BIT_AND: "&" >
	|  < BIT_OR: "|" >
	|  < XOR: "^" >
	|  < REM: "%" >
	|  < LSHIFT: "<<" >
	|  < PLUSASSIGN: "+=" >
	|  < MINUSASSIGN: "-=" >
	|  < STARASSIGN: "*=" >
	|  < SLASHASSIGN: "/=" >
	|  < ANDASSIGN: "&=" >
	|  < ORASSIGN: "|=" >
	|  < XORASSIGN: "^=" >
	|  < REMASSIGN: "%=" >
	|  < LSHIFTASSIGN: "<<=" >
	|  < RSIGNEDSHIFTASSIGN: ">>=" >
	|  < RUNSIGNEDSHIFTASSIGN: ">>>=" >
	|  < ELLIPSIS: "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN : {
	//  < RUNSIGNEDSHIFT: ">>>" >
	//| < RSIGNEDSHIFT: ">>" >
 	< GT: ">" >
}
FSTInfo CompilationUnit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=PackageDeclaration(inTerminal){ replaceName(n);}] (n=ImportDeclaration(inTerminal){ replaceName(n);})* (n=TypeDeclaration(inTerminal){ replaceName("TypeDeclaration", n);}{ replaceName(n);})* <EOF> {return productionEndNonTerminal("CompilationUnit","{TypeDeclaration}","{TypeDeclaration}");}

 )  }

FSTInfo PackageDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"package" n=Name(true){ replaceName(n);} ";" {return productionEndTerminal("PackageDeclaration","-","-","Replacement",first,token);}

 )  }

FSTInfo ImportDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"import" ["static" ] n=Name(true){ replaceName("Name", n);}{ replaceName(n);} [n=ImportPackage(true){ replaceName("ImportPackage", n);}{ replaceName(n);}] ";" {return productionEndTerminal("ImportDeclaration","{Name}{ImportPackage}","{Name}{ImportPackage}","Replacement",first,token);}

 )  }

FSTInfo ImportPackage(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	 "." "*" {return productionEndTerminal("ImportPackage","-",".*","Replacement",first,token);}

 )  }

FSTInfo Modifiers(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(LOOKAHEAD(2) n=Modifier(true){ replaceName(n);})* {return productionEndTerminal("Modifiers","-","-","ModifierListSpecialization",first,token);}

 )  }

FSTInfo Modifier(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"public"  {return productionEndTerminal("Modifier1","-","-","Replacement",first,token);}
 |
	"static"  {return productionEndTerminal("Modifier2","-","-","Replacement",first,token);}
 |
	"protected"  {return productionEndTerminal("Modifier3","-","-","Replacement",first,token);}
 |
	"private"  {return productionEndTerminal("Modifier4","-","-","Replacement",first,token);}
 |
	"final"  {return productionEndTerminal("Modifier5","-","-","Replacement",first,token);}
 |
	"abstract"  {return productionEndTerminal("Modifier6","-","-","Replacement",first,token);}
 |
	"synchronized"  {return productionEndTerminal("Modifier7","-","-","Replacement",first,token);}
 |
	"native"  {return productionEndTerminal("Modifier8","-","-","Replacement",first,token);}
 |
	"transient"  {return productionEndTerminal("Modifier9","-","-","Replacement",first,token);}
 |
	"volatile"  {return productionEndTerminal("Modifier10","-","-","Replacement",first,token);}
 |
	"strictfp"  {return productionEndTerminal("Modifier11","-","-","Replacement",first,token);}
 |
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("Modifier12","-","-","Replacement",first,token);}

 )  }

FSTInfo Id(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} {return productionEndTerminal("Id","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement",first,token);}

 )  }

FSTInfo TypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("EmptyTypeDecl","{AUTO}","{AUTO}","Replacement",first,token);}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} "@" "interface" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "{" (n=AnnotationTypeMemberDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationTypeDeclaration","{Id}","{Id}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] "{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("ClassDeclaration","{Id}","{Id}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" n=EnumConstant(inTerminal){ replaceName(n);} ("," n=EnumConstant(inTerminal){ replaceName(n);})* [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("EnumDecl","{Id}","{Id}");}

 )  }

FSTInfo AnnotationTypeDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" "interface" n=Id(true){ replaceName(n);} n=AnnotationTypeBody(true){ replaceName(n);} {return productionEndTerminal("AnnotationTypeDeclaration","-","-","Replacement",first,token);}

 )  }

FSTInfo ClassOrInterfaceDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ClassOrInterface(true){ replaceName(n);} n=Id(true){ replaceName(n);} [n=TypeParameters(true){ replaceName(n);}] [n=ExtendsList(true){ replaceName(n);}] [n=ImplementsList(true){ replaceName(n);}] n=ClassOrInterfaceBody(true){ replaceName(n);} {return productionEndTerminal("ClassOrInterfaceDeclaration","-","-","Replacement",first,token);}

 )  }

FSTInfo ClassOrInterface(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"class"  {return productionEndTerminal("ClassOrInterface1","-","-","Replacement",first,token);}
 |
	"interface"  {return productionEndTerminal("ClassOrInterface2","-","-","Replacement",first,token);}

 )  }

FSTInfo ExtendsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ClassOrInterfaceType(true){ replaceName(n);} ("," n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("ExtendsList","-","-","Replacement",first,token);}

 )  }

FSTInfo ImplementsList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"implements" n=ClassOrInterfaceType(true){ replaceName(n);} ("," n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("ImplementsList","-","-","ImplementsListMerging",first,token);}

 )  }

FSTInfo EnumDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"enum" n=Id(true){ replaceName(n);} [n=ImplementsList(true){ replaceName(n);}] n=EnumBody(true){ replaceName(n);} {return productionEndTerminal("EnumDeclaration","-","-","Replacement",first,token);}

 )  }

FSTInfo EnumBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=EnumConstant(true){ replaceName(n);} ("," n=EnumConstant(true){ replaceName(n);})* [n=EnumBodyInternal(true){ replaceName(n);}] "}" {return productionEndTerminal("EnumBody","-","-","Replacement",first,token);}

 )  }

FSTInfo EnumBodyInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* {return productionEndNonTerminal("EnumBodyInternal","","");}

 )  }

FSTInfo EnumConstant(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> [n=Arguments(true){ replaceName(n);}] [n=ClassOrInterfaceBody(true){ replaceName(n);}] {return productionEndTerminal("EnumConstant1","-","-","Replacement",first,token);}
 |
	 {return productionEndTerminal("EnumConstant2","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=TypeParameter(true){ replaceName(n);} ("," n=TypeParameter(true){ replaceName(n);})* ">" {return productionEndTerminal("TypeParameters","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> [n=TypeBound(true){ replaceName(n);}] {return productionEndTerminal("TypeParameter","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeBound(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ClassOrInterfaceType(true){ replaceName(n);} ("&" n=ClassOrInterfaceType(true){ replaceName(n);})* {return productionEndTerminal("TypeBound","-","-","Replacement",first,token);}

 )  }

FSTInfo ClassOrInterfaceBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=ClassOrInterfaceBodyDeclaration(true){ replaceName(n);})* "}" {return productionEndTerminal("ClassOrInterfaceBody","-","-","Replacement",first,token);}

 )  }

FSTInfo ClassOrInterfaceBodyDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=Initializer(true){ replaceName(n);} {return productionEndTerminal("InitializerDecl","{AUTO}","{AUTO}","Replacement",first,token);}
 |
	LOOKAHEAD(Modifiers() ClassOrInterface()) n=Modifiers(inTerminal){ replaceName(n);} n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] "{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("InnerClassDecl","{Id}","{Id}");}
 |
	LOOKAHEAD(Modifiers() "enum") n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" n=EnumConstant(inTerminal){ replaceName(n);} ("," n=EnumConstant(inTerminal){ replaceName(n);})* [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("InnerEnumDecl","{Id}","{Id}");}
 |
	LOOKAHEAD( Modifiers() [ TypeParameters() ] <IDENTIFIER> "(") n=Modifiers(true){ replaceName(n);} n=ConstructorDeclaration(true){ replaceName("ConstructorDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("ConstructorDecl","{ConstructorDeclaration}","{ConstructorDeclaration}","ConstructorConcatenation",first,token);}
 |
	LOOKAHEAD(Modifiers() Type() <IDENTIFIER> ( "[" "]" )* ( "," | "=" | ";" ) ) n=Modifiers(true){ replaceName(n);} n=FieldDeclaration(true){ replaceName("FieldDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("FieldDecl","{FieldDeclaration}","{FieldDeclaration}","FieldOverriding",first,token);}
 |
	LOOKAHEAD(2) n=Modifiers(true){ replaceName(n);} n=MethodDeclaration(true){ replaceName("MethodDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("MethodDecl","{MethodDeclaration}","{MethodDeclaration}","JavaMethodOverriding",first,token);}
 |
	";"  {return productionEndTerminal("EmptyDecl","{AUTO}","{AUTO}","Replacement",first,token);}

 )  }

FSTInfo FieldDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Type(true){ replaceName(n);} n=VariableDeclarator(true){ replaceName("VariableDeclarator", n);}{ replaceName(n);} ("," n=VariableDeclarator(true){ replaceName("VariableDeclarator", n);}{ replaceName(n);})* ";" {return productionEndTerminal("FieldDeclaration","-","{VariableDeclarator}","Replacement",first,token);}

 )  }

FSTInfo VariableDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableDeclaratorId(true){ replaceName("VariableDeclaratorId", n);}{ replaceName(n);} ["=" n=VariableInitializer(true){ replaceName(n);}] {return productionEndTerminal("VariableDeclarator","-","{VariableDeclaratorId}","Replacement",first,token);}

 )  }

FSTInfo VariableDeclaratorId(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} ("[" "]" )* {return productionEndTerminal("VariableDeclaratorId","-","{<IDENTIFIER>}","Replacement",first,token);}

 )  }

FSTInfo VariableInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("VariableInitializer1","-","-","Replacement",first,token);}
 |
	n=Expression(true){ replaceName(n);} {return productionEndTerminal("VariableInitializer2","-","-","Replacement",first,token);}

 )  }

FSTInfo ArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" [n=ArrayInitializerInternal(true){ replaceName(n);}] ["," ] "}" {return productionEndTerminal("ArrayInitializer","-","-","Replacement",first,token);}

 )  }

FSTInfo ArrayInitializerInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=VariableInitializer(true){ replaceName(n);} (LOOKAHEAD(2) "," n=VariableInitializer(true){ replaceName(n);})* {return productionEndTerminal("ArrayInitializerInternal","-","-","Replacement",first,token);}

 )  }

FSTInfo MethodDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=TypeParameters(true){ replaceName(n);}] n=ResultType(true){ replaceName(n);} n=MethodDeclarator(true){ replaceName("MethodDeclarator", n);}{ replaceName(n);} ["throws" n=NameList(true){ replaceName(n);}] n=MethodDeclarationBody(true){ replaceName(n);} {return productionEndTerminal("MethodDeclaration","-","{MethodDeclarator}","Replacement",first,token);}

 )  }

FSTInfo MethodDeclarationBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Block(true){ replaceName(n);} {return productionEndTerminal("MethodDeclarationBody1","-","-","Replacement",first,token);}
 |
	";"  {return productionEndTerminal("MethodDeclarationBody2","-","-","Replacement",first,token);}

 )  }

FSTInfo MethodDeclarator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} n=FormalParameters(true){ replaceName("FormalParameters", n);}{ replaceName(n);} ("[" "]" )* {return productionEndTerminal("MethodDeclarator","-","{<IDENTIFIER>}({FormalParameters})","Replacement",first,token);}

 )  }

FSTInfo FormalParameters(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=FormalParametersInternal(true){ replaceName("FormalParametersInternal", n);}{ replaceName(n);}] ")" {return productionEndTerminal("FormalParameters","-","{FormalParametersInternal}","Replacement",first,token);}

 )  }

FSTInfo FormalParametersInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=FormalParameter(true){ replaceName("FormalParameter", n);}{ replaceName(n);} ("," n=FormalParameter(true){ replaceName("FormalParameter", n);}{ replaceName(n);})* {return productionEndTerminal("FormalParametersInternal","-","{FormalParameter}^-","Replacement",first,token);}

 )  }

FSTInfo FormalParameter(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[LOOKAHEAD(Annotation()) n=Annotation(true){ replaceName(n);}] ["final" ] n=Type(true){ replaceName("Type", n);}{ replaceName(n);} ["..." ] n=VariableDeclaratorId(true){ replaceName(n);} {return productionEndTerminal("FormalParameter","-","{Type}","Replacement",first,token);}

 )  }

FSTInfo ConstructorDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	[n=TypeParameters(true){ replaceName(n);}] t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} n=FormalParameters(true){ replaceName("FormalParameters", n);}{ replaceName(n);} ["throws" n=NameList(true){ replaceName(n);}] "{" [LOOKAHEAD(ExplicitConstructorInvocation()) n=ExplicitConstructorInvocation(true){ replaceName(n);}] (n=BlockStatement(true){ replaceName(n);})* "}" {return productionEndTerminal("ConstructorDeclaration","-","{<IDENTIFIER>}({FormalParameters})","Replacement",first,token);}

 )  }

FSTInfo ExplicitConstructorInvocation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("this" Arguments() ";") "this" n=Arguments(true){ replaceName(n);} ";" {return productionEndTerminal("ExplicitConstructorInvocation1","-","-","Replacement",first,token);}
 |
	[LOOKAHEAD(2) n=PrimaryExpression(true){ replaceName(n);} "."] "super" n=Arguments(true){ replaceName(n);} ";" {return productionEndTerminal("ExplicitConstructorInvocation2","-","-","Replacement",first,token);}

 )  }

FSTInfo Initializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	["static" ] n=Block(true){ replaceName(n);} {return productionEndTerminal("Initializer","-","-","Replacement",first,token);}

 )  }

FSTInfo Type(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("Type1","-","{TOSTRING}","Replacement",first,token);}
 |
	n=PrimitiveType(true){ replaceName(n);} {return productionEndTerminal("Type2","-","{TOSTRING}","Replacement",first,token);}

 )  }

FSTInfo ReferenceTypeP(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimitiveType(true){ replaceName(n);} (LOOKAHEAD(2) "[" "]" )+ {return productionEndTerminal("ReferenceTypeP1","-","-","Replacement",first,token);}
 |
	n=ClassOrInterfaceType(true){ replaceName(n);} (LOOKAHEAD(2) "[" "]" )* {return productionEndTerminal("ReferenceTypeP2","-","-","Replacement",first,token);}

 )  }

FSTInfo ClassOrInterfaceType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> [LOOKAHEAD(2) n=TypeArguments(true){ replaceName(n);}] (LOOKAHEAD(2) n=ClassOrInterfaceTypeIntern(true){ replaceName(n);})* {return productionEndTerminal("ClassOrInterfaceType","-","-","Replacement",first,token);}

 )  }

FSTInfo ClassOrInterfaceTypeIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." <IDENTIFIER> [LOOKAHEAD(2) n=TypeArguments(true){ replaceName(n);}] {return productionEndTerminal("ClassOrInterfaceTypeIntern","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeArguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<" n=TypeArgument(true){ replaceName(n);} ("," n=TypeArgument(true){ replaceName(n);})* ">" {return productionEndTerminal("TypeArguments","-","-","Replacement",first,token);}

 )  }

FSTInfo TypeArgument(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("TypeArgument1","-","-","Replacement",first,token);}
 |
	"?" [n=WildcardBounds(true){ replaceName(n);}] {return productionEndTerminal("TypeArgument2","-","-","Replacement",first,token);}

 )  }

FSTInfo WildcardBounds(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"extends" n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("WildcardBounds1","-","-","Replacement",first,token);}
 |
	"super" n=ReferenceTypeP(true){ replaceName(n);} {return productionEndTerminal("WildcardBounds2","-","-","Replacement",first,token);}

 )  }

FSTInfo PrimitiveType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"boolean"  {return productionEndTerminal("PrimitiveType1","-","-","Replacement",first,token);}
 |
	"char"  {return productionEndTerminal("PrimitiveType2","-","-","Replacement",first,token);}
 |
	"byte"  {return productionEndTerminal("PrimitiveType3","-","-","Replacement",first,token);}
 |
	"short"  {return productionEndTerminal("PrimitiveType4","-","-","Replacement",first,token);}
 |
	"int"  {return productionEndTerminal("PrimitiveType5","-","-","Replacement",first,token);}
 |
	"long"  {return productionEndTerminal("PrimitiveType6","-","-","Replacement",first,token);}
 |
	"float"  {return productionEndTerminal("PrimitiveType7","-","-","Replacement",first,token);}
 |
	"double"  {return productionEndTerminal("PrimitiveType8","-","-","Replacement",first,token);}

 )  }

FSTInfo ResultType(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"void"  {return productionEndTerminal("ResultType1","-","-","Replacement",first,token);}
 |
	n=Type(true){ replaceName(n);} {return productionEndTerminal("ResultType2","-","-","Replacement",first,token);}

 )  }

FSTInfo Name(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} (LOOKAHEAD(2) "." t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));})* {return productionEndTerminal("Name","-","{<IDENTIFIER>}^.","Replacement",first,token);}

 )  }

FSTInfo NameList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Name(true){ replaceName(n);} ("," n=Name(true){ replaceName(n);})* {return productionEndTerminal("NameList","-","-","Replacement",first,token);}

 )  }

FSTInfo Expression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalExpression(true){ replaceName(n);} [LOOKAHEAD(2) n=AssignExp(true){ replaceName(n);}] {return productionEndTerminal("Expression","-","-","Replacement",first,token);}

 )  }

FSTInfo AssignExp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AssignmentOperator(true){ replaceName(n);} n=Expression(true){ replaceName(n);} {return productionEndTerminal("AssignExp","-","-","Replacement",first,token);}

 )  }

FSTInfo AssignmentOperator(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"="  {return productionEndTerminal("AssignmentOperator1","-","-","Replacement",first,token);}
 |
	"*="  {return productionEndTerminal("AssignmentOperator2","-","-","Replacement",first,token);}
 |
	"/="  {return productionEndTerminal("AssignmentOperator3","-","-","Replacement",first,token);}
 |
	"%="  {return productionEndTerminal("AssignmentOperator4","-","-","Replacement",first,token);}
 |
	"+="  {return productionEndTerminal("AssignmentOperator5","-","-","Replacement",first,token);}
 |
	"-="  {return productionEndTerminal("AssignmentOperator6","-","-","Replacement",first,token);}
 |
	"<<="  {return productionEndTerminal("AssignmentOperator7","-","-","Replacement",first,token);}
 |
	">>="  {return productionEndTerminal("AssignmentOperator8","-","-","Replacement",first,token);}
 |
	">>>="  {return productionEndTerminal("AssignmentOperator9","-","-","Replacement",first,token);}
 |
	"&="  {return productionEndTerminal("AssignmentOperator10","-","-","Replacement",first,token);}
 |
	"^="  {return productionEndTerminal("AssignmentOperator11","-","-","Replacement",first,token);}
 |
	"|="  {return productionEndTerminal("AssignmentOperator12","-","-","Replacement",first,token);}

 )  }

FSTInfo ConditionalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(ConditionalOrExpression() "?") n=ConditionalExpressionFull(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpression1","-","-","Replacement",first,token);}
 |
	n=ConditionalOrExpression(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpression2","-","-","Replacement",first,token);}

 )  }

FSTInfo ConditionalExpressionFull(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalOrExpression(true){ replaceName(n);} "?" n=Expression(true){ replaceName(n);} ":" n=Expression(true){ replaceName(n);} {return productionEndTerminal("ConditionalExpressionFull","-","-","Replacement",first,token);}

 )  }

FSTInfo ConditionalOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ConditionalAndExpression(true){ replaceName(n);} ("||" n=ConditionalAndExpression(true){ replaceName(n);})* {return productionEndTerminal("ConditionalOrExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo ConditionalAndExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InclusiveOrExpression(true){ replaceName(n);} ("&&" n=InclusiveOrExpression(true){ replaceName(n);})* {return productionEndTerminal("ConditionalAndExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo InclusiveOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ExclusiveOrExpression(true){ replaceName(n);} ("|" n=ExclusiveOrExpression(true){ replaceName(n);})* {return productionEndTerminal("InclusiveOrExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo ExclusiveOrExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AndExpression(true){ replaceName(n);} ("^" n=AndExpression(true){ replaceName(n);})* {return productionEndTerminal("ExclusiveOrExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo AndExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityExpression(true){ replaceName(n);} ("&" n=EqualityExpression(true){ replaceName(n);})* {return productionEndTerminal("AndExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo EqualityExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=InstanceOfExpression(true){ replaceName(n);} (n=EqualityExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("EqualityExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo EqualityExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=EqualityOp(true){ replaceName(n);} n=InstanceOfExpression(true){ replaceName(n);} {return productionEndTerminal("EqualityExpressionIntern","-","-","Replacement",first,token);}

 )  }

FSTInfo EqualityOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"=="  {return productionEndTerminal("EqualityOp1","-","-","Replacement",first,token);}
 |
	"!="  {return productionEndTerminal("EqualityOp2","-","-","Replacement",first,token);}

 )  }

FSTInfo InstanceOfExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalExpression(true){ replaceName(n);} ["instanceof" n=Type(true){ replaceName(n);}] {return productionEndTerminal("InstanceOfExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo RelationalExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftExpression(true){ replaceName(n);} (n=RelationalExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("RelationalExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo RelationalExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=RelationalOp(true){ replaceName(n);} n=ShiftExpression(true){ replaceName(n);} {return productionEndTerminal("RelationalExpressionIntern","-","-","Replacement",first,token);}

 )  }

FSTInfo RelationalOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<"  {return productionEndTerminal("RelationalOp1","-","-","Replacement",first,token);}
 |
	">"  {return productionEndTerminal("RelationalOp2","-","-","Replacement",first,token);}
 |
	"<="  {return productionEndTerminal("RelationalOp3","-","-","Replacement",first,token);}
 |
	">="  {return productionEndTerminal("RelationalOp4","-","-","Replacement",first,token);}

 )  }

FSTInfo ShiftExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveExpression(true){ replaceName(n);} (LOOKAHEAD(2) n=ShiftExpressionRight(true){ replaceName(n);})* {return productionEndTerminal("ShiftExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo ShiftExpressionRight(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ShiftOp(true){ replaceName(n);} n=AdditiveExpression(true){ replaceName(n);} {return productionEndTerminal("ShiftExpressionRight","-","-","Replacement",first,token);}

 )  }

FSTInfo ShiftOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"<<"  {return productionEndTerminal("ShiftOp1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(3) ">" ">" ">"  {return productionEndTerminal("ShiftOp2","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2) ">" ">"  {return productionEndTerminal("ShiftOp3","-","-","Replacement",first,token);}

 )  }

FSTInfo AdditiveExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeExpression(true){ replaceName(n);} (n=AdditiveExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("AdditiveExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo AdditiveExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOp(true){ replaceName(n);} n=MultiplicativeExpression(true){ replaceName(n);} {return productionEndTerminal("AdditiveExpressionIntern","-","-","Replacement",first,token);}

 )  }

FSTInfo AdditiveOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"+"  {return productionEndTerminal("AdditiveOp1","-","-","Replacement",first,token);}
 |
	"-"  {return productionEndTerminal("AdditiveOp2","-","-","Replacement",first,token);}

 )  }

FSTInfo MultiplicativeExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryExpression(true){ replaceName(n);} (n=MultiplicativeExpressionIntern(true){ replaceName(n);})* {return productionEndTerminal("MultiplicativeExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo MultiplicativeExpressionIntern(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MultiplicativeOp(true){ replaceName(n);} n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("MultiplicativeExpressionIntern","-","-","Replacement",first,token);}

 )  }

FSTInfo MultiplicativeOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"*"  {return productionEndTerminal("MultiplicativeOp1","-","-","Replacement",first,token);}
 |
	"/"  {return productionEndTerminal("MultiplicativeOp2","-","-","Replacement",first,token);}
 |
	"%"  {return productionEndTerminal("MultiplicativeOp3","-","-","Replacement",first,token);}

 )  }

FSTInfo UnaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=AdditiveOp(true){ replaceName(n);} n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression1","-","-","Replacement",first,token);}
 |
	n=PreIncrementExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression2","-","-","Replacement",first,token);}
 |
	n=PreDecrementExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression3","-","-","Replacement",first,token);}
 |
	n=UnaryExpressionNotPlusMinus(true){ replaceName(n);} {return productionEndTerminal("UnaryExpression4","-","-","Replacement",first,token);}

 )  }

FSTInfo PreIncrementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++" n=PrimaryExpression(true){ replaceName(n);} {return productionEndTerminal("PreIncrementExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo PreDecrementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"--" n=PrimaryExpression(true){ replaceName(n);} {return productionEndTerminal("PreDecrementExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo UnaryExpressionNotPlusMinus(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=UnaryOp(true){ replaceName(n);} n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpressionNotPlusMinus1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(CastLookahead()) n=CastExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpressionNotPlusMinus2","-","-","Replacement",first,token);}
 |
	n=PostfixExpression(true){ replaceName(n);} {return productionEndTerminal("UnaryExpressionNotPlusMinus3","-","-","Replacement",first,token);}

 )  }

FSTInfo UnaryOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("UnaryOp1","-","-","Replacement",first,token);}
 |
	"!"  {return productionEndTerminal("UnaryOp2","-","-","Replacement",first,token);}

 )  }

FSTInfo CastLookahead(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "(" n=PrimitiveType(true){ replaceName(n);} {return productionEndTerminal("CastLookahead1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD("(" Type() "[") "(" n=Type(true){ replaceName(n);} "[" "]" {return productionEndTerminal("CastLookahead2","-","-","Replacement",first,token);}
 |
	"(" n=Type(true){ replaceName(n);} ")" n=CastLAOp(true){ replaceName(n);} {return productionEndTerminal("CastLookahead3","-","-","Replacement",first,token);}

 )  }

FSTInfo CastLAOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"~"  {return productionEndTerminal("CastLAOp1","-","-","Replacement",first,token);}
 |
	"!"  {return productionEndTerminal("CastLAOp2","-","-","Replacement",first,token);}
 |
	"("  {return productionEndTerminal("CastLAOp3","-","-","Replacement",first,token);}
 |
	"this"  {return productionEndTerminal("CastLAOp4","-","-","Replacement",first,token);}
 |
	"super"  {return productionEndTerminal("CastLAOp5","-","-","Replacement",first,token);}
 |
	"new"  {return productionEndTerminal("CastLAOp6","-","-","Replacement",first,token);}
 |
	<IDENTIFIER> {return productionEndTerminal("CastLAOp7","-","-","Replacement",first,token);}
 |
	n=Literal(true){ replaceName(n);} {return productionEndTerminal("CastLAOp8","-","-","Replacement",first,token);}

 )  }

FSTInfo PostfixExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryExpression(true){ replaceName(n);} [n=PostfixOp(true){ replaceName(n);}] {return productionEndTerminal("PostfixExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo PostfixOp(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("PostfixOp1","-","-","Replacement",first,token);}
 |
	"--"  {return productionEndTerminal("PostfixOp2","-","-","Replacement",first,token);}

 )  }

FSTInfo CastExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("(" PrimitiveType()) "(" n=Type(true){ replaceName(n);} ")" n=UnaryExpression(true){ replaceName(n);} {return productionEndTerminal("CastExpression1","-","-","Replacement",first,token);}
 |
	"(" n=Type(true){ replaceName(n);} ")" n=UnaryExpressionNotPlusMinus(true){ replaceName(n);} {return productionEndTerminal("CastExpression2","-","-","Replacement",first,token);}

 )  }

FSTInfo PrimaryExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PrimaryPrefix(true){ replaceName(n);} (LOOKAHEAD(2) n=PrimarySuffix(true){ replaceName(n);})* {return productionEndTerminal("PrimaryExpression","-","-","Replacement",first,token);}

 )  }

FSTInfo MemberSelector(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"." n=TypeArguments(true){ replaceName(n);} <IDENTIFIER> {return productionEndTerminal("MemberSelector","-","-","Replacement",first,token);}

 )  }

FSTInfo PrimaryPrefix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Literal(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix1","-","-","Replacement",first,token);}
 |
	"this"  {return productionEndTerminal("PrimaryPrefix2","-","-","Replacement",first,token);}
 |
	"super" "." <IDENTIFIER> {return productionEndTerminal("PrimaryPrefix3","-","-","Replacement",first,token);}
 |
	"(" n=Expression(true){ replaceName(n);} ")" {return productionEndTerminal("PrimaryPrefix4","-","-","Replacement",first,token);}
 |
	n=AllocationExpression(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix5","-","-","Replacement",first,token);}
 |
	LOOKAHEAD( ResultType() "." "class") n=ResultType(true){ replaceName(n);} "." "class" {return productionEndTerminal("PrimaryPrefix6","-","-","Replacement",first,token);}
 |
	n=Name(true){ replaceName(n);} {return productionEndTerminal("PrimaryPrefix7","-","-","Replacement",first,token);}

 )  }

FSTInfo PrimarySuffix(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "." "this"  {return productionEndTerminal("PrimarySuffix1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2) "." "super"  {return productionEndTerminal("PrimarySuffix2","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(2) "." n=AllocationExpression(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix3","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(3) n=MemberSelector(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix4","-","-","Replacement",first,token);}
 |
	"[" n=Expression(true){ replaceName(n);} "]" {return productionEndTerminal("PrimarySuffix5","-","-","Replacement",first,token);}
 |
	"." <IDENTIFIER> {return productionEndTerminal("PrimarySuffix6","-","-","Replacement",first,token);}
 |
	n=Arguments(true){ replaceName(n);} {return productionEndTerminal("PrimarySuffix7","-","-","Replacement",first,token);}

 )  }

FSTInfo Literal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<INTEGER_LITERAL> {return productionEndTerminal("Literal1","-","-","Replacement",first,token);}
 |
	<FLOATING_POINT_LITERAL> {return productionEndTerminal("Literal2","-","-","Replacement",first,token);}
 |
	<CHARACTER_LITERAL> {return productionEndTerminal("Literal3","-","-","Replacement",first,token);}
 |
	<STRING_LITERAL> {return productionEndTerminal("Literal4","-","-","Replacement",first,token);}
 |
	n=BooleanLiteral(true){ replaceName(n);} {return productionEndTerminal("Literal5","-","-","Replacement",first,token);}
 |
	n=NullLiteral(true){ replaceName(n);} {return productionEndTerminal("Literal6","-","-","Replacement",first,token);}

 )  }

FSTInfo BooleanLiteral(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"true"  {return productionEndTerminal("BooleanLiteral1","-","-","Replacement",first,token);}
 |
	"false"  {return productionEndTerminal("BooleanLiteral2","-","-","Replacement",first,token);}

 )  }

FSTInfo NullLiteral(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"null"  {return productionEndTerminal("NullLiteral","-","-","Replacement",first,token);}

 )  }

FSTInfo Arguments(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"(" [n=ArgumentList(true){ replaceName(n);}] ")" {return productionEndTerminal("Arguments","-","-","Replacement",first,token);}

 )  }

FSTInfo ArgumentList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Expression(true){ replaceName(n);} ("," n=Expression(true){ replaceName(n);})* {return productionEndTerminal("ArgumentList","-","-","Replacement",first,token);}

 )  }

FSTInfo AllocationExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "new" n=PrimitiveType(true){ replaceName(n);} n=ArrayDimsAndInits(true){ replaceName(n);} {return productionEndTerminal("AllocationExpression1","-","-","Replacement",first,token);}
 |
	"new" n=ClassOrInterfaceType(true){ replaceName(n);} [n=TypeArguments(true){ replaceName(n);}] n=AllocationExpressionInit(true){ replaceName(n);} {return productionEndTerminal("AllocationExpression2","-","-","Replacement",first,token);}

 )  }

FSTInfo AllocationExpressionInit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=ArrayDimsAndInits(true){ replaceName(n);} {return productionEndTerminal("AllocationExpressionInit1","-","-","Replacement",first,token);}
 |
	n=Arguments(true){ replaceName(n);} [n=ClassOrInterfaceBody(true){ replaceName(n);}] {return productionEndTerminal("AllocationExpressionInit2","-","-","Replacement",first,token);}

 )  }

FSTInfo ArrayDimsAndInits(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) "[" n=Expression(true){ replaceName(n);} "]" (LOOKAHEAD(2) "[" n=Expression(true){ replaceName(n);} "]")* (LOOKAHEAD(2) "[" "]" )* {return productionEndTerminal("ArrayDimsAndInits1","-","-","Replacement",first,token);}
 |
	("[" "]" )+ n=ArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("ArrayDimsAndInits2","-","-","Replacement",first,token);}

 )  }

FSTInfo Statement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(2) n=LabeledStatement(true){ replaceName(n);} {return productionEndTerminal("Statement1","-","-","Replacement",first,token);}
 |
	n=AssertStatement(true){ replaceName(n);} {return productionEndTerminal("Statement2","-","-","Replacement",first,token);}
 |
	n=Block(true){ replaceName(n);} {return productionEndTerminal("Statement3","-","-","Replacement",first,token);}
 |
	n=EmptyStatement(true){ replaceName(n);} {return productionEndTerminal("Statement4","-","-","Replacement",first,token);}
 |
	n=StatementExpression(true){ replaceName(n);} ";" {return productionEndTerminal("Statement5","-","-","Replacement",first,token);}
 |
	n=SwitchStatement(true){ replaceName(n);} {return productionEndTerminal("Statement6","-","-","Replacement",first,token);}
 |
	n=IfStatement(true){ replaceName(n);} {return productionEndTerminal("Statement7","-","-","Replacement",first,token);}
 |
	n=WhileStatement(true){ replaceName(n);} {return productionEndTerminal("Statement8","-","-","Replacement",first,token);}
 |
	n=DoStatement(true){ replaceName(n);} {return productionEndTerminal("Statement9","-","-","Replacement",first,token);}
 |
	n=ForStatement(true){ replaceName(n);} {return productionEndTerminal("Statement10","-","-","Replacement",first,token);}
 |
	n=BreakStatement(true){ replaceName(n);} {return productionEndTerminal("Statement11","-","-","Replacement",first,token);}
 |
	n=ContinueStatement(true){ replaceName(n);} {return productionEndTerminal("Statement12","-","-","Replacement",first,token);}
 |
	n=ReturnStatement(true){ replaceName(n);} {return productionEndTerminal("Statement13","-","-","Replacement",first,token);}
 |
	n=ThrowStatement(true){ replaceName(n);} {return productionEndTerminal("Statement14","-","-","Replacement",first,token);}
 |
	n=SynchronizedStatement(true){ replaceName(n);} {return productionEndTerminal("Statement15","-","-","Replacement",first,token);}
 |
	n=TryStatement(true){ replaceName(n);} {return productionEndTerminal("Statement16","-","-","Replacement",first,token);}

 )  }

FSTInfo AssertStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"assert" n=Expression(true){ replaceName(n);} [":" n=Expression(true){ replaceName(n);}] ";" {return productionEndTerminal("AssertStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo LabeledStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> ":" n=Statement(true){ replaceName(n);} {return productionEndTerminal("LabeledStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo Block(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=BlockStatement(true){ replaceName(n);})* "}" {return productionEndTerminal("Block","-","-","Replacement",first,token);}

 )  }

FSTInfo BlockStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD([ "final" ] Type() <IDENTIFIER>) n=LocalVariableDeclaration(true){ replaceName(n);} ";" {return productionEndTerminal("BlockStatement1","-","-","Replacement",first,token);}
 |
	n=Statement(true){ replaceName(n);} {return productionEndTerminal("BlockStatement2","-","-","Replacement",first,token);}
 |
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("BlockStatement3","-","-","Replacement",first,token);}
 |
	n=Modifiers(true){ replaceName(n);} n=ClassOrInterfaceDeclaration(true){ replaceName(n);} {return productionEndTerminal("BlockStatement4","-","-","Replacement",first,token);}

 )  }

FSTInfo LocalVariableDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	["final" ] n=Type(true){ replaceName(n);} n=VariableDeclarator(true){ replaceName(n);} ("," n=VariableDeclarator(true){ replaceName(n);})* {return productionEndTerminal("LocalVariableDeclaration","-","-","Replacement",first,token);}

 )  }

FSTInfo EmptyStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	";"  {return productionEndTerminal("EmptyStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo StatementExpression(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=PreIncrementExpression(true){ replaceName(n);} {return productionEndTerminal("StatementExpression1","-","-","Replacement",first,token);}
 |
	n=PreDecrementExpression(true){ replaceName(n);} {return productionEndTerminal("StatementExpression2","-","-","Replacement",first,token);}
 |
	n=PrimaryExpression(true){ replaceName(n);} [n=StatementExpressionAssignment(true){ replaceName(n);}] {return productionEndTerminal("StatementExpression3","-","-","Replacement",first,token);}

 )  }

FSTInfo StatementExpressionAssignment(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"++"  {return productionEndTerminal("StatementExpressionAssignment1","-","-","Replacement",first,token);}
 |
	"--"  {return productionEndTerminal("StatementExpressionAssignment2","-","-","Replacement",first,token);}
 |
	n=AssignmentOperator(true){ replaceName(n);} n=Expression(true){ replaceName(n);} {return productionEndTerminal("StatementExpressionAssignment3","-","-","Replacement",first,token);}

 )  }

FSTInfo SwitchStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"switch" "(" n=Expression(true){ replaceName(n);} ")" "{" (n=SwitchStatementLabel(true){ replaceName(n);})* "}" {return productionEndTerminal("SwitchStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo SwitchStatementLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=SwitchLabel(true){ replaceName(n);} (n=BlockStatement(true){ replaceName(n);})* {return productionEndTerminal("SwitchStatementLabel","-","-","Replacement",first,token);}

 )  }

FSTInfo SwitchLabel(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"case" n=Expression(true){ replaceName(n);} ":" {return productionEndTerminal("SwitchLabel1","-","-","Replacement",first,token);}
 |
	"default" ":"  {return productionEndTerminal("SwitchLabel2","-","-","Replacement",first,token);}

 )  }

FSTInfo IfStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"if" "(" n=Expression(true){ replaceName(n);} ")" n=Statement(true){ replaceName(n);} [LOOKAHEAD(1) "else" n=Statement(true){ replaceName(n);}] {return productionEndTerminal("IfStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo WhileStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"while" "(" n=Expression(true){ replaceName(n);} ")" n=Statement(true){ replaceName(n);} {return productionEndTerminal("WhileStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo DoStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"do" n=Statement(true){ replaceName(n);} "while" "(" n=Expression(true){ replaceName(n);} ")" ";" {return productionEndTerminal("DoStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo ForStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"for" "(" n=ForStatementInternal(true){ replaceName(n);} ")" n=Statement(true){ replaceName(n);} {return productionEndTerminal("ForStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo ForStatementInternal(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Type() <IDENTIFIER> ":") [n=FINAL_T(true){ replaceName(n);}] n=Type(true){ replaceName(n);} <IDENTIFIER> ":" n=Expression(true){ replaceName(n);} {return productionEndTerminal("ForStatementInternal1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD(FINAL_T() Type() <IDENTIFIER> ":") n=FINAL_T(true){ replaceName(n);} n=Type(true){ replaceName(n);} <IDENTIFIER> ":" n=Expression(true){ replaceName(n);} {return productionEndTerminal("ForStatementInternal2","-","-","Replacement",first,token);}
 |
	[n=ForInit(true){ replaceName(n);}] ";" [n=Expression(true){ replaceName(n);}] ";" [n=ForUpdate(true){ replaceName(n);}] {return productionEndTerminal("ForStatementInternal3","-","-","Replacement",first,token);}

 )  }

FSTInfo FINAL_T(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"final"  {return productionEndTerminal("FINAL_T","-","-","Replacement",first,token);}

 )  }

FSTInfo ForInit(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD([ "final" ] Type() <IDENTIFIER>) n=LocalVariableDeclaration(true){ replaceName(n);} {return productionEndTerminal("ForInit1","-","-","Replacement",first,token);}
 |
	n=StatementExpressionList(true){ replaceName(n);} {return productionEndTerminal("ForInit2","-","-","Replacement",first,token);}

 )  }

FSTInfo StatementExpressionList(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StatementExpression(true){ replaceName(n);} ("," n=StatementExpression(true){ replaceName(n);})* {return productionEndTerminal("StatementExpressionList","-","-","Replacement",first,token);}

 )  }

FSTInfo ForUpdate(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=StatementExpressionList(true){ replaceName(n);} {return productionEndTerminal("ForUpdate","-","-","Replacement",first,token);}

 )  }

FSTInfo BreakStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"break" [<IDENTIFIER>] ";" {return productionEndTerminal("BreakStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo ContinueStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"continue" [<IDENTIFIER>] ";" {return productionEndTerminal("ContinueStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo ReturnStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"return" [n=Expression(true){ replaceName(n);}] ";" {return productionEndTerminal("ReturnStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo ThrowStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"throw" n=Expression(true){ replaceName(n);} ";" {return productionEndTerminal("ThrowStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo SynchronizedStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"synchronized" "(" n=Expression(true){ replaceName(n);} ")" n=Block(true){ replaceName(n);} {return productionEndTerminal("SynchronizedStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo TryStatement(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"try" n=Block(true){ replaceName(n);} n=TryStatementEnd(true){ replaceName(n);} {return productionEndTerminal("TryStatement","-","-","Replacement",first,token);}

 )  }

FSTInfo TryStatementEnd(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	(n=CatchBlock(true){ replaceName(n);})+ ["finally" n=Block(true){ replaceName(n);}] {return productionEndTerminal("TryStatementEnd1","-","-","Replacement",first,token);}
 |
	"finally" n=Block(true){ replaceName(n);} {return productionEndTerminal("TryStatementEnd2","-","-","Replacement",first,token);}

 )  }

FSTInfo CatchBlock(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"catch" "(" n=FormalParameter(true){ replaceName(n);} ")" n=Block(true){ replaceName(n);} {return productionEndTerminal("CatchBlock","-","-","Replacement",first,token);}

 )  }

FSTInfo Annotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD("@" Name() "(" ( <IDENTIFIER> "=" | ")" )) n=NormalAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation1","-","-","Replacement",first,token);}
 |
	LOOKAHEAD("@" Name() "(") n=SingleMemberAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation2","-","-","Replacement",first,token);}
 |
	n=MarkerAnnotation(true){ replaceName(n);} {return productionEndTerminal("Annotation3","-","-","Replacement",first,token);}

 )  }

FSTInfo NormalAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} "(" [n=MemberValuePairs(true){ replaceName(n);}] ")" {return productionEndTerminal("NormalAnnotation","-","-","Replacement",first,token);}

 )  }

FSTInfo MarkerAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} {return productionEndTerminal("MarkerAnnotation","-","-","Replacement",first,token);}

 )  }

FSTInfo SingleMemberAnnotation(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"@" n=Name(true){ replaceName(n);} "(" n=MemberValue(true){ replaceName(n);} ")" {return productionEndTerminal("SingleMemberAnnotation","-","-","Replacement",first,token);}

 )  }

FSTInfo MemberValuePairs(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=MemberValuePair(true){ replaceName(n);} ("," n=MemberValuePair(true){ replaceName(n);})* {return productionEndTerminal("MemberValuePairs","-","-","Replacement",first,token);}

 )  }

FSTInfo MemberValuePair(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	<IDENTIFIER> "=" n=MemberValue(true){ replaceName(n);} {return productionEndTerminal("MemberValuePair","-","-","Replacement",first,token);}

 )  }

FSTInfo MemberValue(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	n=Annotation(true){ replaceName(n);} {return productionEndTerminal("MemberValue1","-","-","Replacement",first,token);}
 |
	n=MemberValueArrayInitializer(true){ replaceName(n);} {return productionEndTerminal("MemberValue2","-","-","Replacement",first,token);}
 |
	n=ConditionalExpression(true){ replaceName(n);} {return productionEndTerminal("MemberValue3","-","-","Replacement",first,token);}
 |
	 {return productionEndTerminal("MemberValue4","-","-","Replacement",first,token);}

 )  }

FSTInfo MemberValueArrayInitializer(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" n=MemberValue(true){ replaceName(n);} (LOOKAHEAD(2) "," n=MemberValue(true){ replaceName(n);})* ["," ] "}" {return productionEndTerminal("MemberValueArrayInitializer","-","-","Replacement",first,token);}

 )  }

FSTInfo AnnotationTypeBody(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"{" (n=AnnotationTypeMemberDeclaration(true){ replaceName(n);})* "}" {return productionEndTerminal("AnnotationTypeBody","-","-","Replacement",first,token);}

 )  }

FSTInfo AnnotationTypeMemberDeclaration(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	LOOKAHEAD(Modifiers() Type() <IDENTIFIER> "(") n=Modifiers(true){ replaceName(n);} n=Type(true){ replaceName(n);} t=<IDENTIFIER>{ replaceName(new FSTInfo("<IDENTIFIER>",t.image));} "(" ")" [n=DefaultValue(true){ replaceName(n);}] ";" {return productionEndTerminal("AnnotationMethodDecl","{<IDENTIFIER>}","{<IDENTIFIER>}","Replacement",first,token);}
 |
	LOOKAHEAD(Modifiers() "@" "interface") n=Modifiers(inTerminal){ replaceName(n);} "@" "interface" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} "{" (n=AnnotationTypeMemberDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationInnerAnnotation","{Id}","{Id}");}
 |
	LOOKAHEAD(1) n=Modifiers(inTerminal){ replaceName(n);} n=ClassOrInterface(inTerminal){ replaceName(n);} n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=TypeParameters(inTerminal){ replaceName(n);}] [n=ExtendsList(inTerminal){ replaceName(n);}] [n=ImplementsList(inTerminal){ replaceName(n);}] "{" (n=ClassOrInterfaceBodyDeclaration(inTerminal){ replaceName(n);})* "}" {return productionEndNonTerminal("AnnotationInnerClass","{Id}","{Id}");}
 |
	LOOKAHEAD(2) n=Modifiers(inTerminal){ replaceName(n);} "enum" n=Id(inTerminal){ replaceName("Id", n);}{ replaceName(n);} [n=ImplementsList(inTerminal){ replaceName(n);}] "{" n=EnumConstant(inTerminal){ replaceName(n);} ("," n=EnumConstant(inTerminal){ replaceName(n);})* [n=EnumBodyInternal(inTerminal){ replaceName(n);}] "}" {return productionEndNonTerminal("AnnotationInnerEnum","{Id}","{Id}");}
 |
	LOOKAHEAD(1) n=Modifiers(true){ replaceName(n);} n=FieldDeclaration(true){ replaceName("FieldDeclaration", n);}{ replaceName(n);} {return productionEndTerminal("AnnotationFieldDecl","{FieldDeclaration}","{FieldDeclaration}","FieldOverriding",first,token);}
 |
	";"  {return productionEndTerminal("AnnoationEmptyDecl","{AUTO}","{AUTO}","Replacement",first,token);}

 )  }

FSTInfo DefaultValue(boolean inTerminal) : { Token first=null,t;FSTInfo n; 
} { {first=getToken(1); productionStart(inTerminal); } (
	"default" n=MemberValue(true){ replaceName(n);} {return productionEndTerminal("DefaultValue","-","-","Replacement",first,token);}

 )  }

